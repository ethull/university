// This file is BASED ON part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: project05starter/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[8],          // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[8],         // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* Stephen says: REMEMBER the tricky requirement: since our registers
     * are 16 bits, but the ALU only 8 bits, writing to the A register
     * from the ALU output should leave the top 8 bits unchanged. */

    Or(a=instruction[15], b=false, out=isCi); // true if C instruction;
    Not(in=instruction[15], out=isAi); // true if A instruction; 
     
    // Here's a little to get you started
    Mux16(a[0..14]=instruction[0..14], b[0..7]=aluOut, b[8..15]=currentAHigh,
        sel=instruction[15], // doing C?
        out=nextA);
    //will tell AR to load if Ainsrct or Cinsrct that effects M (writes)
    Or(a=isAi,b=instruction[5],out=writingA);
    ARegister(in=nextA, load=writingA, out=currentA,
        out[0..7]=currentALow, out[8..15]=currentAHigh,
        out[0..14]=addressM);

    // select from AR output or M input, sels with dest bit
    Mux16(a=currentA,b[0..7]=inM,sel=instruction[12],out[0..7]=ARorM);

    // is a C instruction and dest is set
    And(a=isCi, b=instruction[4], out=writingD);
    DRegister(in[0..7]=aluOut, load=writingD, out[0..7]=currentD);

    /* AGAIN to satisfy the tricky 8-bit requirement,
     * use the *top* 8 bits of the (16-bit) ALU, so that
     * the 'ng' negative output is correct. */
    ALU(x[8..15]=currentD, y[8..15]=ARorM,
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6],
        out[8..15]=aluOut, out[8..15]=outM,
        zr=ZrOut, ng=NgOut
        );
    // Figures 2.6 and 4.3 show the mapping from ALU control sigs to instruction c bits
    // Set out flags and ProgramCounter
    Not(in=NgOut, out=nNgOut);
    Not(in=ZrOut, out=nZrOut);
    // if result is not negative and its not zero than its positive
    And(a=nNgOut, b=nZrOut, out=positiveOut);

    // if c instruction and dest is M, write M?
    And(a=isCi, b=instruction[3], out=writeM);

    And(a=ZrOut, b=instruction[1], out=jeq);
    And(a=NgOut, b=instruction[2], out=jlt);
    And(a=positiveOut, b=instruction[0], out=jgt);

    Or(a=jeq, b=jlt, out=jle);
    //jump or not
    Or(a=jle, b=jgt, out=gotoA);
    // if is c instruction and is a jump load the pc)
    And(a=isCi, b=gotoA, out=loadPc);
    //inc if you dont load
    Not(in=loadPc, out=incPc);
    PC(in=currentA, inc=incPc, load=loadPc, reset=reset, out[0..14]=pc);
}
